name: Trivy Security Scans
description: Scan container image for vulnerabilities and Dockerfile for misconfigurations

inputs:
  image_tag:
    description: Full image reference to scan (registry/name:tag)
    required: true
  severity:
    description: Severity levels to scan for
    required: false
    default: 'CRITICAL,HIGH'
  fail_on_issues:
    description: Whether to fail the action if issues are found
    required: false
    default: 'true'
  trivy_ignore_file:
    description: Path to trivyignore file
    required: false
    default: '.trivyignore.yaml'

outputs:
  vulnerability_count:
    description: Number of vulnerabilities found
    value: ${{ steps.analyze-vulns.outputs.count }}
  config_count:
    description: Number of misconfigurations found
    value: ${{ steps.analyze-configs.outputs.count }}
  total_issues:
    description: Total number of security issues found
    value: ${{ steps.calculate-total.outputs.total }}
  security_gate_status:
    description: Overall security gate status (passed/failed)
    value: ${{ steps.security-gate.outputs.status }}

runs:
  using: composite
  steps:
    # Vulnerability scan - Table format for display
    - name: Run Trivy vulnerability scanner (Table)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.image_tag }}
        format: 'table'
        severity: ${{ inputs.severity }}
        output: 'trivy-vuln-table.txt'
        exit-code: '0'
      env:
        TRIVY_IGNOREFILE: ${{ inputs.trivy_ignore_file }}

    # Vulnerability scan - JSON for processing
    - name: Run Trivy vulnerability scanner (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.image_tag }}
        format: 'json'
        output: 'trivy-vuln-results.json'
        severity: ${{ inputs.severity }}
        exit-code: '0'
      env:
        TRIVY_IGNOREFILE: ${{ inputs.trivy_ignore_file }}

    # Config scan - Table format for display
    - name: Run Trivy config scanner (Table)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'table'
        severity: ${{ inputs.severity }}
        output: 'trivy-config-table.txt'
        exit-code: '0'
      env:
        TRIVY_IGNOREFILE: ${{ inputs.trivy_ignore_file }}

    # Config scan - JSON for processing
    - name: Run Trivy config scanner (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-config-results.json'
        severity: ${{ inputs.severity }}
        exit-code: '0'
      env:
        TRIVY_IGNOREFILE: ${{ inputs.trivy_ignore_file }}

    # Analyze vulnerability results
    - name: Analyze vulnerability results
      id: analyze-vulns
      if: always()
      shell: bash
      run: |
        VULN_COUNT=0
        if [ -f trivy-vuln-results.json ]; then
          VULN_COUNT=$(jq '[.Results[].Vulnerabilities // [] | .[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' trivy-vuln-results.json)
        fi
        echo "count=$VULN_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$VULN_COUNT" -gt 0 ]; then
          echo "::warning title=Vulnerabilities Found::$VULN_COUNT vulnerabilities detected in ${{ inputs.image_tag }}"
        fi

    # Analyze config results
    - name: Analyze config results
      id: analyze-configs
      if: always()
      shell: bash
      run: |
        CONFIG_COUNT=0
        if [ -f trivy-config-results.json ]; then
          CONFIG_COUNT=$(jq '[.Results[].Misconfigurations[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' trivy-config-results.json 2>/dev/null || echo "0")
        fi
        echo "count=$CONFIG_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$CONFIG_COUNT" -gt 0 ]; then
          echo "::warning title=Misconfigurations Found::$CONFIG_COUNT misconfigurations detected"
        fi

    # Calculate total
    - name: Calculate total issues
      id: calculate-total
      if: always()
      shell: bash
      run: |
        VULN_COUNT=${{ steps.analyze-vulns.outputs.count }}
        CONFIG_COUNT=${{ steps.analyze-configs.outputs.count }}
        TOTAL=$((VULN_COUNT + CONFIG_COUNT))
        echo "total=$TOTAL" >> $GITHUB_OUTPUT
        
        if [ "$TOTAL" -eq 0 ]; then
          echo "::notice title=Security Scan Passed::No issues found at severity level ${{ inputs.severity }}"
        else
          echo "::error title=Security Issues Found::$TOTAL total security issues detected"
        fi

    # Publish to GitHub Summary
    - name: Publish scan results to summary
      if: always()
      shell: bash
      run: |
        {
          echo "# Trivy Security Scan Report"
          echo ""
          echo "**Image:** \`${{ inputs.image_tag }}\`"
          echo "**Severity Filter:** ${{ inputs.severity }}"
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M UTC')"
          echo ""
          
          # Status
          VULN_COUNT=${{ steps.analyze-vulns.outputs.count }}
          CONFIG_COUNT=${{ steps.analyze-configs.outputs.count }}
          TOTAL=${{ steps.calculate-total.outputs.total }}
          
          if [ "$TOTAL" -eq 0 ]; then
            echo "## Status: PASSED"
            echo "No security issues found."
          else
            echo "## Status: FAILED"
            echo "Found $TOTAL security issues ($VULN_COUNT vulnerabilities, $CONFIG_COUNT misconfigurations)"
          fi
          echo ""
          
          # Vulnerability Results
          if [[ -s trivy-vuln-table.txt ]]; then
            echo "## Vulnerability Scan Results"
            echo "<details><summary>Click to expand vulnerability details</summary>"
            echo ""
            echo '```'
            cat trivy-vuln-table.txt
            echo '```'
            echo "</details>"
            echo ""
          fi
          
          # Config Results
          if [[ -s trivy-config-table.txt ]]; then
            echo "## Configuration Scan Results"
            echo "<details><summary>Click to expand configuration details</summary>"
            echo ""
            echo '```'
            cat trivy-config-table.txt
            echo '```'
            echo "</details>"
            echo ""
          fi
          
        } >> $GITHUB_STEP_SUMMARY

    # Security Gate
    - name: Security gate check
      id: security-gate
      if: always()
      shell: bash
      run: |
        TOTAL=${{ steps.calculate-total.outputs.total }}
        
        if [ "$TOTAL" -gt 0 ]; then
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "Security gate failed: $TOTAL issues found"
          
          if [ "${{ inputs.fail_on_issues }}" == "true" ]; then
            exit 1
          fi
        else
          echo "status=passed" >> $GITHUB_OUTPUT
          echo "Security gate passed"
        fi

    # Upload artifacts
    - name: Upload scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-results-${{ github.run_number }}
        path: |
          trivy-*.txt
          trivy-*.json
        retention-days: 7
        if-no-files-found: warn