# security/container-build/action.yml
name: 'Secure Container Build'
description: 'Build and push container with security best practices'
author: 'Your Organization Security Team'

branding:
  icon: 'shield'
  color: 'blue'

inputs:
  image_name:
    description: 'Container image name (e.g. ghcr.io/org/app)'
    required: true
  dockerfile:
    description: 'Path to Dockerfile'
    required: false
    default: 'Dockerfile'
  context:
    description: 'Docker build context'
    required: false
    default: '.'
  registry_username:
    description: 'Registry username'
    required: true
  registry_token:
    description: 'Registry token/password'
    required: true
  registry_url:
    description: 'Registry URL'
    required: false
    default: 'ghcr.io'
  build_args:
    description: 'Build arguments (multiline)'
    required: false
    default: ''
  platforms:
    description: 'Target platforms for build'
    required: false
    default: 'linux/amd64'
  push:
    description: 'Whether to push the image'
    required: false
    default: 'true'
  tags_suffix:
    description: 'Additional tag suffix'
    required: false
    default: ''
  sbom_generation:
    description: 'Generate SBOM during build'
    required: false
    default: 'true'
  security_scan:
    description: 'Run security scan on built image'
    required: false
    default: 'true'

outputs:
  image_digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  image_id:
    description: 'Image ID'
    value: ${{ steps.build.outputs.imageid }}
  image_ref:
    description: 'Full image reference with digest'
    value: ${{ inputs.image_name }}@${{ steps.build.outputs.digest }}
  image_tags:
    description: 'All image tags'
    value: ${{ steps.meta.outputs.tags }}
  security_scan_passed:
    description: 'Whether security scan passed'
    value: ${{ steps.security.outputs.passed }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ ! "${{ inputs.image_name }}" =~ ^[a-z0-9]([a-z0-9\-\.]*[a-z0-9])?(/[a-z0-9]([a-z0-9\-\.]*[a-z0-9])?)*$ ]]; then
          echo "::error::Invalid image name format"
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry_url }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_token }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.image_name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ inputs.tags_suffix }},enable=${{ inputs.tags_suffix != '' }}
        labels: |
          org.opencontainers.image.title=${{ github.event.repository.name }}
          org.opencontainers.image.description=Built with secure pipeline
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

    - name: Build and push container
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build_args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        sbom: ${{ inputs.sbom_generation }}
        provenance: true

    - name: Security scan
      id: security
      if: inputs.security_scan == 'true'
      shell: bash
      run: |
        echo "Running basic security checks..."
        
        # Check for common security issues
        if docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
           -v "$(pwd)":/workspace aquasec/trivy:latest image \
           --severity HIGH,CRITICAL --exit-code 1 \
           ${{ inputs.image_name }}@${{ steps.build.outputs.digest }}; then
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "::warning::Security scan found issues"
        fi

    - name: Generate summary
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## Container Build Summary
        
        **Image:** `${{ inputs.image_name }}`
        **Digest:** `${{ steps.build.outputs.digest }}`
        **Platforms:** `${{ inputs.platforms }}`
        **Security Scan:** ${{ inputs.security_scan == 'true' && 'Enabled' || 'Disabled' }}
        
        ### Build Details
        - **Pushed:** ${{ inputs.push }}
        - **SBOM Generated:** ${{ inputs.sbom_generation }}
        - **Provenance:** Enabled
        
        ### Tags
        ```
        ${{ steps.meta.outputs.tags }}
        ```
        EOF