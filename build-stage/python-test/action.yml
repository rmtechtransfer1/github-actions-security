name: Test Python Service
description: Run FastAPI service tests

runs:
  using: composite
  
  steps:
  - name: Setup service environment
    shell: bash
    run: |
      mkdir -p service
      if [ ! -f service/.env ]; then
        echo "CLI_APP_PATH=./build/bin/cli_app" > service/.env
        echo "SERVICE_PORT=8080" >> service/.env
      fi

  # Run Python tests
  - name: Run pytest
    shell: bash
    run: |
      # Define output filenames
      PYTEST_XML_REPORT="pytest_results.xml"
      PYTEST_TXT_OUTPUT="pytest_output.txt"
      TEST_ARTIFACTS_DIR="build-test-artifacts"
      ARTIFACT_NAME="python-test-artifacts"

      export PYTHONPATH="${PYTHONPATH}:$(pwd)"
      python -m pytest service/tests/ -v --junitxml=$PYTEST_XML_REPORT > $PYTEST_TXT_OUTPUT 2>&1
      echo "PYTEST_EXIT_CODE=$?" >> $GITHUB_ENV
      
      echo "PYTEST_XML_REPORT=$PYTEST_XML_REPORT" >> $GITHUB_ENV
      echo "PYTEST_TXT_OUTPUT=$PYTEST_TXT_OUTPUT" >> $GITHUB_ENV
      echo "TEST_ARTIFACTS_DIR=$TEST_ARTIFACTS_DIR" >> $GITHUB_ENV
      echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
      exit 0
    
  # Create Summary
  - name: Create test summary
    if: always()
    shell: bash
    run: |
      PYTEST_EXIT_CODE="${PYTEST_EXIT_CODE:-0}"
      PYTEST_TXT_OUTPUT="${PYTEST_TXT_OUTPUT:-pytest_output.txt}"

      {
        echo "## Python Service Tests"
        echo "**Status:** $([ "$PYTEST_EXIT_CODE" == "0" ] && echo "PASSED" || echo "FAILED")"
        echo ""
        if [ -f "$PYTEST_TXT_OUTPUT" ]; then
          echo "<details><summary>Test Results</summary>"
          echo ""
          echo '```'
           tail -n 50 "$PYTEST_TXT_OUTPUT"
          echo '```'
          echo "</details>"
        fi
      } >> $GITHUB_STEP_SUMMARY
  
  # Prepare artifacts
  - name: Prepare test artifacts
    if: always()
    shell: bash
    run: |
      PYTEST_XML_REPORT="${PYTEST_XML_REPORT:-pytest_results.xml}"
      PYTEST_TXT_OUTPUT="${PYTEST_TXT_OUTPUT:-pytest_output.txt}"
      TEST_ARTIFACTS_DIR="${TEST_ARTIFACTS_DIR:-build-test-artifacts}"
      
      mkdir -p $TEST_ARTIFACTS_DIR 
      [ -f "$PYTEST_XML_REPORT" ] && cp $PYTEST_XML_REPORT $TEST_ARTIFACTS_DIR/ || true
      [ -f "$PYTEST_TXT_OUTPUT" ] && cp $PYTEST_TXT_OUTPUT $TEST_ARTIFACTS_DIR/ || true
  
  # Upload test artifacts 
  - name: Upload test artifacts
    uses: actions/upload-artifact@v4
    if: always() && env.ACT != 'true'
    with:
      name: ${{ env.ARTIFACT_NAME }}
      path: ${{ env.TEST_ARTIFACTS_DIR }}/
      retention-days: 7
      if-no-files-found: warn