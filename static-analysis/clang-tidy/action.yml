# To-dos: Add clang-tidy checks file

name: Static Analysis
description: clang-tidy
runs:
  using: composite
  steps:
    - name: Install tools
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build build-essential clang-tidy

    # Build
    - name: Generate compile_commands.json
      shell: bash
      run: |
        # Define build variables
        BUILD_DIR="build"
        BUILD_TYPE="${BUILD_TYPE:-Release}"
        BUILD_GENERATOR="Ninja"
        
        cmake -S . -B $BUILD_DIR -G $BUILD_GENERATOR \
          -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        
        cmake --build $BUILD_DIR -j$(nproc)
        
        test -f $BUILD_DIR/compile_commands.json || { echo "missing compile_commands.json"; exit 1; }
        
        # Save to environment
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV

    # Run Clang-tidy
    - name: Run clang-tidy
      shell: bash
      run: |
        # Define variables
        SOURCE_DIR="cpp"
        CLANG_TIDY_REPORT="static_analysis_clang_tidy_report.txt"
        ARTIFACT_NAME="static-analysis-clang-tidy"
        CLANG_TIDY_CONFIG_DIR="security_compliance/clang-tidy"
        CLANG_TIDY_CONFIG_FILE=".clang-tidy"
        BUILD_DIR="${BUILD_DIR:-build}"
        RETENTION_DAYS="7"
        
        if [ -d "$SOURCE_DIR" ]; then
          echo "Running clang-tidy static analysis..."
          
          # Save to environment
          echo "CLANG_TIDY_REPORT=$CLANG_TIDY_REPORT" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "RETENTION_DAYS=$RETENTION_DAYS" >> $GITHUB_ENV
          
          # Add configs from .clang-tidy file
          if [ -f "$CLANG_TIDY_CONFIG_DIR/$CLANG_TIDY_CONFIG_FILE" ]; then
            cp $CLANG_TIDY_CONFIG_DIR/$CLANG_TIDY_CONFIG_FILE $CLANG_TIDY_CONFIG_FILE
          fi
          
          # Run clang-tidy and capture output
          run-clang-tidy -p $BUILD_DIR -j $(nproc) 2>&1 | tee $CLANG_TIDY_REPORT || true
          TIDY_EXIT=${PIPESTATUS[0]}
          
          # Quick Check
          echo ""
          echo "CLANG-TIDY RESULTS"
          if [ -f "$CLANG_TIDY_REPORT" ]; then
            ERRORS=$(grep -c " error:" $CLANG_TIDY_REPORT 2>/dev/null || true)
            echo "Critical issues: ${ERRORS:-0}"
          fi
          
          # Exit based on tool result
          if [ $TIDY_EXIT -ne 0 ]; then
            echo "CLANG-TIDY FAILED: Security issues found"
            exit 1
          else
            echo "CLANG-TIDY PASSED: No security issues found"
          fi
        else
          echo "No $SOURCE_DIR directory - skipping clang-tidy"
        fi
    
    # Upload
    - name: Upload clang-tidy report
      if: always() && env.ACT != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.CLANG_TIDY_REPORT }}
        retention-days: ${{ env.RETENTION_DAYS }}
        if-no-files-found: ignore