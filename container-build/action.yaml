name: Container Build
description: Build & push image to GHCR
inputs:
  image_name:
    description: image path (e.g. ghcr.io/<org>/hash-service)
    required: true
  dockerfile:
    description: Dockerfile path
    default: Docker/Dockerfile
  context:
    description: Docker build context
    default: .
  ib_username:
    description: Iron Bank (registry1) username
    required: true
  ib_password:
    description: Iron Bank (registry1) password
    required: true
  ghcr_username:
    description: Username for GHCR login
    required: true
  ghcr_token:
    description: Token for GHCR login
    required: true
  binary_name:
    description: C++ binary name passed as build-arg BINARY_NAME
    default: cli_app

outputs:
  digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  imageid:
    description: 'Image ID'
    value: ${{ steps.build.outputs.imageid }}
  metadata:
    description: 'Build metadata'
    value: ${{ steps.build.outputs.metadata }}
  tags:
    description: 'Image tags'
    value: ${{ steps.meta.outputs.tags }}
  # Override for SLSA
  image-name:
    description: 'Primary image reference for SLSA'
    value: ${{ inputs.image_name }}:${{ github.sha }}

runs:
  using: composite
  steps:
    # Setup Docker Buildx
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Registry Logins
    - name: Login to Registry1 (Iron Bank)
      uses: docker/login-action@v3
      with:
        registry: registry1.dso.mil
        username: ${{ inputs.ib_username }}
        password: ${{ inputs.ib_password }}
    
    # Registry Logins
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcr_username }}
        password: ${{ inputs.ghcr_token }}

    # Extract as much as possible for debugging
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.image_name }}
        tags: |
           type=sha,format=short,prefix=
        # Fix the title to be "hash-service" instead of repository name
        labels: |
          org.opencontainers.image.title=hash-service
          org.opencontainers.image.description=Hash service container
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md

    # Build and Push
    - name: Build and push
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: |
          manifest:org.opencontainers.image.title=hash-service
          manifest:org.opencontainers.image.description=Hash service container
          manifest:org.opencontainers.image.url=https://github.com/users/${{ github.repository_owner }}/packages/container/package/hash-service
          index:org.opencontainers.image.title=hash-service
          index:org.opencontainers.image.description=Hash service container
          index:org.opencontainers.image.url=https://github.com/users/${{ github.repository_owner }}/packages/container/package/hash-service
        build-args: |
          BINARY_NAME=${{ inputs.binary_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # Add GitHub annotations
    - name: Add build annotations
      if: always()
      shell: bash
      run: |
        if [ "${{ steps.build.outcome }}" == "success" ]; then
          if [ "${{ github.event_name }}" != "pull_request" ]; then
           echo "::notice title=Container Built::Successfully built and pushed ${{ inputs.image_name }}"

          else
            echo "::notice title=Container Built::Successfully built ${{ inputs.image_name }} (not pushed - PR build)"
          fi
        else
          echo "::error title=Build Failed::Failed to build container image"
        fi

   # Create GitHub Summary
    - name: Publish build results to summary
      if: always()
      shell: bash
      run: |
        {
        echo "# Container Build Report"
        echo ""
        echo "**Image:** \`${{ inputs.image_name }}\`"
        echo "**Tags:** \`${{ steps.meta.outputs.tags }}\`"
        echo "**Dockerfile:** \`${{ inputs.dockerfile }}\`"
        echo "**Date:** $(date -u '+%Y-%m-%d %H:%M UTC')"
        echo "**Status:** ${{ steps.build.outcome }}"
        echo ""
        
        # Status
        if [ "${{ steps.build.outcome }}" == "success" ]; then
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "## Status: PUSHED"
            echo "Successfully built and pushed to GHCR"
          else
            echo "## Status: BUILT"
            echo "Successfully built (not pushed - PR build)"
          fi
        else
          echo "## Status: FAILED"
          echo "Build failed - check logs for details"
        fi
        echo ""
        } >> $GITHUB_STEP_SUMMARY