name: SBOM Generation for C++ and Python
description: Generate CycloneDX SBOMs using cyclonedx-cmake for C++ and cyclonedx-py for Python

runs:
  using: composite
  steps:
    # Setup build environment
    - name: Setup build environment
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential pkg-config python3 python3-pip jq

    # Generate C++ SBOM using Syft
    - name: Generate C++ SBOM with Syft
      shell: bash
      run: |
        # Define SBOM filenames
        CPP_SBOM_CYCLONEDX="cpp-sbom.cyclonedx.json"
        CPP_SBOM_SPDX="cpp-sbom.spdx.json"
        
        echo "Installing Syft for C++ SBOM generation..."
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
        
        if [ -f "CMakeLists.txt" ]; then
          echo "Generating C++ SBOM with Syft..."
          
          # Build the project first to get better dependency detection
          mkdir -p build
          cd build
          
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cd ..
          
          # Generate CycloneDX SBOM
          syft . -o cyclonedx-json=cpp-sbom.cyclonedx.json
          
          # Validate C++ SBOM
          if [ -f "$CPP_SBOM_CYCLONEDX" ]; then
            COMPONENT_COUNT=$(jq '.components | length' $CPP_SBOM_CYCLONEDX 2>/dev/null || echo "0")
            echo "C++ CycloneDX SBOM generated: $COMPONENT_COUNT components"

            echo "CPP_SBOM_CYCLONEDX=$CPP_SBOM_CYCLONEDX" >> $GITHUB_ENV
            echo "CPP_SBOM_SPDX=$CPP_SBOM_SPDX" >> $GITHUB_ENV
          else
            echo "Warning: C++ SBOM generation failed"
            exit 1
          fi
        else
          echo "No CMakeLists.txt found, skipping C++ SBOM generation"
        fi

    # Generate Python SBOM using cyclonedx-py
    - name: Generate Python SBOM with cyclonedx-py
      shell: bash
      run: |
        # Define SBOM filenames
        PYTHON_SBOM_CYCLONEDX="python-sbom.cyclonedx.json"
        PYTHON_SBOM_SPDX="python-sbom.spdx.json"

        echo "Installing CycloneDX Python tools..."
        pip install cyclonedx-bom
        
        echo "Generating Python SBOM with cyclonedx-py..."
        
        # Generate JSON format
        cyclonedx-py environment --spec-version 1.6 --output-format JSON --output-file $PYTHON_SBOM_CYCLONEDX
        
        # Validate Python SBOM
        if [ -f "$PYTHON_SBOM_CYCLONEDX" ]; then
          COMPONENT_COUNT=$(jq '.components | length' $PYTHON_SBOM_CYCLONEDX 2>/dev/null || echo "0")
          echo "Python CycloneDX SBOM generated: $COMPONENT_COUNT components"
          # Save to environment for later steps
          echo "PYTHON_SBOM_CYCLONEDX=$PYTHON_SBOM_CYCLONEDX" >> $GITHUB_ENV
          echo "PYTHON_SBOM_SPDX=$PYTHON_SBOM_SPDX" >> $GITHUB_ENV
        else
          echo "Python SBOM generation failed"
          exit 1
        fi

    # Convert CycloneDX to SPDX using sbomconvert
    - name: Convert to SPDX format using sbomconvert
      shell: bash
      run: |
        # Retrieve filenames from environment or use defaults
        CPP_SBOM_CYCLONEDX="${CPP_SBOM_CYCLONEDX:-cpp-sbom.cyclonedx.json}"
        CPP_SBOM_SPDX="${CPP_SBOM_SPDX:-cpp-sbom.spdx.json}"
        PYTHON_SBOM_CYCLONEDX="${PYTHON_SBOM_CYCLONEDX:-python-sbom.cyclonedx.json}"
        PYTHON_SBOM_SPDX="${PYTHON_SBOM_SPDX:-python-sbom.spdx.json}"

        echo "Installing sbomconvert for SPDX conversion..."
        pip install sbomconvert
        
        echo "Verifing sbomconvert installed"
        sbomconvert -h
        
        echo "Converting CycloneDX to SPDX using sbomconvert..."
        # Convert C++ SBOM from CycloneDX to SPDX
        if [ -f "$CPP_SBOM_CYCLONEDX" ]; then
            sbomconvert \
            -i $CPP_SBOM_CYCLONEDX \
            --sbom spdx \
            --format json \
            -o $CPP_SBOM_SPDX
        fi
        
        # Convert Python SBOM from CycloneDX to SPDX
        if [ -f "$PYTHON_SBOM_CYCLONEDX" ]; then
          sbomconvert \
            -i $PYTHON_SBOM_CYCLONEDX \
            --sbom spdx \
            --format json \
            -o $PYTHON_SBOM_SPDX
        fi

    # Create GitHub Summary
    - name: Publish SBOM generation to summary
      if: always()
      shell: bash
      run: |
        # Retrieve filenames from environment or use defaults
        CPP_SBOM_CYCLONEDX="${CPP_SBOM_CYCLONEDX:-cpp-sbom.cyclonedx.json}"
        CPP_SBOM_SPDX="${CPP_SBOM_SPDX:-cpp-sbom.spdx.json}"
        PYTHON_SBOM_CYCLONEDX="${PYTHON_SBOM_CYCLONEDX:-python-sbom.cyclonedx.json}"
        PYTHON_SBOM_SPDX="${PYTHON_SBOM_SPDX:-python-sbom.spdx.json}"
        
        {
          echo "# SBOM Generation Report"
          echo ""
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M UTC')"
          echo ""
          
          # C++ SBOM Status
          if [ -f "$CPP_SBOM_CYCLONEDX" ]; then
            CPP_COMPONENTS=$(jq '.components | length' $CPP_SBOM_CYCLONEDX 2>/dev/null || echo "0")
            echo "## C++ SBOM"
            echo "Generated successfully"
            echo "- Components: $CPP_COMPONENTS"
            echo "- Formats: CycloneDX, SPDX"
          else
            echo "## C++ SBOM"
            echo "Not generated (no CMakeLists.txt found)"
          fi
          echo ""
          
          # Python SBOM Status
          if [ -f "$PYTHON_SBOM_CYCLONEDX" ]; then
            PYTHON_COMPONENTS=$(jq '.components | length' $PYTHON_SBOM_CYCLONEDX 2>/dev/null || echo "0")
            echo "## Python SBOM"
            echo "Generated successfully"
            echo "- Components: $PYTHON_COMPONENTS"
            echo "- Formats: CycloneDX, SPDX"
          else
            echo "## Python SBOM"
            echo "Generation failed"
          fi
          echo ""
          
          # File listing
          echo "## Generated Files"
          echo '```'
          ls -lh *.json 2>/dev/null | grep -E "(sbom|spdx|cyclonedx)" || echo "No SBOM files found"
          echo '```'
        } >> $GITHUB_STEP_SUMMARY

   # Upload SBOM artifacts
    - name: Upload SBOM artifacts
      if: always() && env.ACT != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: source-sboms
        path: |
          cpp-sbom.cyclonedx.json
          cpp-sbom.spdx.json
          python-sbom.cyclonedx.json
          python-sbom.spdx.json
        retention-days: 7
        if-no-files-found: warn