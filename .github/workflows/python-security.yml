name: Python Security - Reusable Workflow

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.11'
      source-dir:
        description: 'Python source directory'
        required: false
        type: string
        default: 'service'
      requirements-file:
        description: 'Requirements file path'
        required: false
        type: string
        default: 'service/requirements.txt'
      test-dir:
        description: 'Test directory path'
        required: false
        type: string
        default: 'service/tests'
      bandit-severity:
        description: 'Bandit severity level (l, ll, lll)'
        required: false
        type: string
        default: 'll'
      bandit-exclude:
        description: 'Bandit exclude patterns'
        required: false
        type: string
        default: ''
      fail-on-security-issues:
        description: 'Fail workflow on security issues'
        required: false
        type: boolean
        default: true
    outputs:
      test-results:
        description: 'Test results status'
        value: ${{ jobs.python-security.outputs.test-results }}

permissions:
  contents: read
  security-events: write

jobs:
  python-security:
    runs-on: ubuntu-latest
    outputs:
      test-results: ${{ steps.test.outcome }}
    permissions:
      contents: read
      security-events: write

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest bandit[toml]
        if [ -f "${{ inputs.requirements-file }}" ]; then 
          pip install -r "${{ inputs.requirements-file }}"
        fi
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 ${{ inputs.source-dir }}/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 ${{ inputs.source-dir }}/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      id: test
      run: |
        if [ -d "${{ inputs.test-dir }}" ]; then
          cd ${{ inputs.source-dir }}
          pytest
        else
          echo "No test directory found at ${{ inputs.test-dir }}"
          exit 0
        fi
        
    - name: Security scan with Bandit
      run: |
        BANDIT_CMD="bandit -r ${{ inputs.source-dir }}/ -${{ inputs.bandit-severity }}"
        
        if [ -n "${{ inputs.bandit-exclude }}" ]; then
          BANDIT_CMD="$BANDIT_CMD --exclude ${{ inputs.bandit-exclude }}"
        fi
        
        if [ "${{ inputs.fail-on-security-issues }}" = "false" ]; then
          $BANDIT_CMD || true
        else
          $BANDIT_CMD
        fi
