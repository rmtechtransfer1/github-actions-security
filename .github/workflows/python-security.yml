name: Python Security Workflow
description: Reusable workflow for Python projects

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version'
        required: false
        default: '3.11'
        type: string
      source-dir:
        description: 'Source directory'
        required: false
        default: '.'
        type: string
      requirements-file:
        description: 'Requirements file path'
        required: false
        default: ''
        type: string
      test-dir:
        description: 'Test directory'
        required: false
        default: 'tests'
        type: string
      bandit-severity:
        description: 'Bandit severity level'
        required: false
        default: 'll'
        type: string
      fail-on-security-issues:
        description: 'Fail if security issues found'
        required: false
        default: true
        type: boolean
    outputs:
      security-status:
        description: 'Security scan status'
        value: ${{ jobs.python-security.outputs.security-status }}
      test-status:
        description: 'Test status'
        value: ${{ jobs.python-security.outputs.test-status }}

jobs:
  python-security:
    runs-on: ubuntu-latest
    outputs:
      security-status: ${{ steps.security.outputs.status }}
      test-status: ${{ steps.tests.outputs.status }}
    
    steps:
    - name: Checkout calling repository code
      uses: actions/checkout@v4
    
    - name: Setup Python dependencies and tools
      uses: rmtechtransfer1/github-actions-security/.github/actions/setup-dependencies/python@main
      with:
        python-version: ${{ inputs.python-version }}
        requirements-file: ${{ inputs.requirements-file }}
        install-security-tools: 'true'
        cache-prefix: 'rmtech-python-security'
        test-framework: 'pytest'
        
    - name: Run Bandit security scan
      id: security
      working-directory: ${{ inputs.source-dir }}
      run: |
        bandit -r . -f json -o bandit-report.json -${{ inputs.bandit-severity }} || true
        bandit -r . -f txt -${{ inputs.bandit-severity }}
        echo "status=completed" >> "$GITHUB_OUTPUT"
      continue-on-error: ${{ !inputs.fail-on-security-issues }}
    
    - name: Run Safety check
      working-directory: ${{ inputs.source-dir }}
      run: |
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: ${{ !inputs.fail-on-security-issues }}
    
    - name: Run pip-audit
      working-directory: ${{ inputs.source-dir }}
      run: |
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit
      continue-on-error: ${{ !inputs.fail-on-security-issues }}
    
    - name: Run flake8 linting
      working-directory: ${{ inputs.source-dir }}
      run: |
        flake8 . --count --exit-zero --max-complexity=10 --statistics \
          --format=json --output-file=flake8-report.json
      continue-on-error: true
    
    - name: Run tests
      id: tests
      if: inputs.test-dir != ''
      working-directory: ${{ inputs.source-dir }}
      run: |
        pytest ${{ inputs.test-dir }} \
          --cov=. \
          --cov-report=xml:coverage.xml \
          --cov-report=term \
          --junit-xml=junit.xml
        echo "status=passed" >> "$GITHUB_OUTPUT"
      continue-on-error: true
    
    - name: Generate Python SBOM
      working-directory: ${{ inputs.source-dir }}
      run: |
        cyclonedx-py environment \
          --spec-version 1.6 \
          --output-format JSON \
          --output-file python-sbom.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: python-security-reports-${{ github.run_number }}
        path: |
          ${{ inputs.source-dir }}/bandit-report.json
          ${{ inputs.source-dir }}/safety-report.json
          ${{ inputs.source-dir }}/pip-audit-report.json
          ${{ inputs.source-dir }}/flake8-report.json
          ${{ inputs.source-dir }}/python-sbom.json
          ${{ inputs.source-dir }}/coverage.xml
          ${{ inputs.source-dir }}/junit.xml
        retention-days: 7